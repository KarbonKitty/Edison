@page "/"
@using System.Timers

<div class="container">
    <div class=@(ShowSaveNotification ? "toast" : "toast invisible")>
        <p>Game saved!</p>
    </div>

    <div class="title">
        <h1>Edison</h1>
    </div>

    <div class="currencySidebar">
        <h2>Money: @DisplayHelpers.DisplayPrice(Engine.State.Cash)</h2>
        <button class="btn" @onclick="SaveGame">Save game</button>
        <button class="btn" @onclick="LoadGame">Load game</button>
    </div>

    <div class="buildingList">
        @foreach (var generator in Engine.State.Generators)
        {
            <PowerGeneratorComponent Generator=@generator />
        }
    </div>

    <div class="gridList">
        <!---->
    </div>
</div>

@code {
    [Inject] protected GameEngine Engine { get; set; }
    protected Timer gameTimer;
    protected Timer autoSaveTimer;
    protected Timer saveNotificationTimer { get; set; }
    private bool ShowSaveNotification { get; set; }

    protected override void OnInitialized()
    {
        gameTimer = new Timer
        {
            Interval = 50
        };
        gameTimer.Elapsed += LoopStep;
        gameTimer.Start();

        autoSaveTimer = new Timer {
            Interval = 30_000
        };
        autoSaveTimer.Elapsed += AutoSave;
        autoSaveTimer.Start();

        saveNotificationTimer = new Timer {
            Interval = 5_000,
            AutoReset = false
        };
        saveNotificationTimer.Elapsed += RemoveSaveNotification;

        // this doesn't do anything if there is no saved game data
        LoadGame();
    }

    private void LoopStep(object sender, ElapsedEventArgs e)
    {
        Engine.ProcessTime(e.SignalTime);
        this.StateHasChanged();
    }

    private async void AutoSave(object sender, ElapsedEventArgs e)
    {
        await this.SaveGame();
        ShowSaveNotification = true;
        saveNotificationTimer.Stop();
        saveNotificationTimer.Start();
        StateHasChanged();
    }

    private void RemoveSaveNotification(object sender, ElapsedEventArgs e)
    {
        ShowSaveNotification = false;
        StateHasChanged();
    }

    private async Task SaveGame() => await Engine.SaveGame();

    private async Task LoadGame()
    {
        var serializedState = await Engine.GetSavedGameString();
        if (serializedState is not null)
        {
            Engine.LoadGame(serializedState);
        }
    }
}
